package cipher

import (
	"encoding/binary"
	"errors"
)

var decryptSBox = [256]byte{
	0x98, 0xEC, 0x00, 0x24, 0x4D, 0xEE, 0xA0, 0xCB, 0xBE, 0x5B,
	0x19, 0x0B, 0x0C, 0xF2, 0x7A, 0x0F, 0x27, 0x29, 0xAB, 0xAF,
	0x91, 0x1A, 0x1B, 0x34, 0xE2, 0xC9, 0x7B, 0x75, 0xA1, 0x3A,
	0xB5, 0x30, 0x65, 0xD1, 0x2B, 0xA9, 0xB9, 0x26, 0x8A, 0xE6,
	0x44, 0x58, 0x37, 0xF9, 0x28, 0x33, 0x1C, 0xAA, 0x92, 0x84,
	0x51, 0x99, 0xE4, 0xBC, 0xE1, 0x3F, 0xA6, 0xE3, 0xD8, 0x50,
	0xDB, 0xE0, 0x2C, 0x45, 0x85, 0x31, 0x6E, 0x6C, 0x4C, 0xFF,
	0x07, 0xBB, 0xB2, 0x6B, 0x62, 0xF1, 0x8F, 0xC0, 0x52, 0x48,
	0x47, 0x08, 0x3E, 0xB7, 0xCE, 0x95, 0xD3, 0x64, 0x6D, 0x18,
	0x5A, 0x06, 0x49, 0x77, 0x4A, 0xA5, 0x70, 0xCC, 0xFA, 0x6A,
	0x35, 0x0D, 0xB3, 0x5E, 0xAE, 0xC7, 0x1E, 0x61, 0xF6, 0x87,
	0xD6, 0x21, 0x5D, 0x5C, 0x7F, 0xC1, 0xB1, 0x3B, 0xB6, 0x38,
	0xBD, 0xC5, 0x83, 0x39, 0xE7, 0x76, 0xA8, 0xCD, 0x56, 0xEB,
	0x9B, 0x57, 0x78, 0xD7, 0x14, 0x0E, 0xFE, 0x1D, 0xB0, 0xD2,
	0xE9, 0x11, 0x09, 0xF7, 0x13, 0x80, 0xB8, 0xFB, 0x60, 0x9C,
	0xDF, 0x86, 0x4E, 0x71, 0x8E, 0x8D, 0xC2, 0x88, 0x04, 0x32,
	0x9F, 0x53, 0x4B, 0xE5, 0xF4, 0x42, 0x74, 0x2F, 0x96, 0x17,
	0xED, 0x90, 0x46, 0x41, 0xA2, 0xA7, 0x43, 0xB4, 0xEF, 0x8B,
	0x66, 0xD4, 0x3C, 0x94, 0xC8, 0x54, 0xEA, 0x12, 0x93, 0x81,
	0x15, 0xD9, 0x0A, 0x23, 0x4F, 0x69, 0xF5, 0xE8, 0x8C, 0xAD,
	0x68, 0x63, 0xCA, 0x55, 0xD5, 0x6F, 0xFD, 0x22, 0xDC, 0x73,
	0x97, 0xBA, 0xF8, 0x03, 0x59, 0xA4, 0xAC, 0xBF, 0x10, 0x2D,
	0x1F, 0x9A, 0xC3, 0xD0, 0xFC, 0x79, 0xDE, 0x67, 0x9E, 0x20,
	0x9D, 0x02, 0x7E, 0x2A, 0xC4, 0xF0, 0xCF, 0x7C, 0x7D, 0x01,
	0x89, 0x05, 0x5F, 0xC6, 0xA3, 0xDD, 0x25, 0x40, 0x3D, 0x16,
	0x2E, 0x72, 0xDA, 0xF3, 0x82, 0x36,
}

type Decipher struct {
	Diverged bool
	Key      uint32
}

func (c *Decipher) Decrypt(data []byte) (result []byte, err error) {
	if !c.Diverged {
		c.Diverged = true
		c.Key = binary.LittleEndian.Uint32(data[len(data)-4:])
		data = data[:len(data)-4]
	}
	if len(data) < 8 {
		err = errors.New("packet too short")
		return
	}

	buf := make([]byte, len(data))
	copy(buf, data)

	c.Key = decryptXorStep(buf, c.Key)

	decryptSBoxStep(buf)

	if !verifyChecksum(buf) {
		err = errors.New("checksum failed")
		return
	}

	payloadSize := int(binary.LittleEndian.Uint16(buf)) - 4
	if payloadSize < 0 || payloadSize > len(buf) {
		err = errors.New("invalid packet size")
		return
	}

	// strip payloadSize(2bytes),checksum(2bytes)
	result = buf[4 : 4+payloadSize]
	return
}

func decryptXorStep(data []byte, key uint32) uint32 {
	buf := make([]byte, 4)
	for i := 0; i < (len(data)+3)>>2; i++ { // 4 bytes align
		if i*4+4 <= len(data) {
			copy(buf, data[i*4:i*4+4])
		} else {
			copy(buf, data[i*4:])
		}
		v := binary.LittleEndian.Uint32(buf)
		xored := v ^ key
		binary.LittleEndian.PutUint32(buf, xored)
		copy(data[i*4:], buf)

		vLow := uint16(v & 0xFFFF)
		vHigh := uint16(v >> 16)

		v7 := decryptLCG16(vLow)
		key = (uint32(decryptLCG16(vHigh))<<16 | uint32(v7)) ^ 0xA55AA55A
	}
	return key
}

func decryptLCG16(a uint16) uint16 {
	return uint16((241103*uint32(a) + 2533101) >> 16)
}

func decryptSBoxStep(buf []byte) {
	for i := range buf {
		buf[i] = decryptSBox[buf[i]]
	}
}

func verifyChecksum(data []byte) bool {
	expected := int16(binary.LittleEndian.Uint16(data[2:]))
	binary.LittleEndian.PutUint16(data[2:], 0)

	var result int16
	for i := uint16(2); i < uint16(len(data)>>1)-2; i++ {
		result += int16(binary.LittleEndian.Uint16(data[2*i:]))
	}

	return result+expected == 0
}
