package cipher

import (
	"encoding/binary"
	"errors"
)

var encryptBox = [256]byte{
	0x02, 0xEF, 0xE7, 0xD5, 0x9E, 0xF1, 0x5B, 0x46, 0x51, 0x8E,
	0xC0, 0x0B, 0x0C, 0x65, 0x87, 0x0F, 0xDA, 0x8D, 0xBB, 0x90,
	0x86, 0xBE, 0xF9, 0xA9, 0x59, 0x0A, 0x15, 0x16, 0x2E, 0x89,
	0x6A, 0xDC, 0xE5, 0x6F, 0xCF, 0xC1, 0x03, 0xF6, 0x25, 0x10,
	0x2C, 0x11, 0xE9, 0x22, 0x3E, 0xDB, 0xFA, 0xA7, 0x1F, 0x41,
	0x9F, 0x2D, 0x17, 0x64, 0xFF, 0x2A, 0x77, 0x7B, 0x1D, 0x75,
	0xB6, 0xF8, 0x52, 0x37, 0xF7, 0xAD, 0xA5, 0xB0, 0x28, 0x3F,
	0xAC, 0x50, 0x4F, 0x5C, 0x5E, 0xA2, 0x44, 0x04, 0x98, 0xC2,
	0x3B, 0x32, 0x4E, 0xA1, 0xB9, 0xCB, 0x80, 0x83, 0x29, 0xD6,
	0x5A, 0x09, 0x71, 0x70, 0x67, 0xF2, 0x94, 0x6B, 0x4A, 0xC9,
	0x57, 0x20, 0xB4, 0xE3, 0xC8, 0xC3, 0x63, 0x49, 0x43, 0x58,
	0x42, 0xCD, 0x60, 0x99, 0xFB, 0xD1, 0xA6, 0x1B, 0x7D, 0x5D,
	0x84, 0xE1, 0x0E, 0x1A, 0xED, 0xEE, 0xE8, 0x72, 0x91, 0xBD,
	0xFE, 0x7A, 0x31, 0x40, 0x97, 0x6D, 0x9D, 0xF0, 0x26, 0xB3,
	0xC6, 0x9B, 0x9A, 0x4C, 0xAB, 0x14, 0x30, 0xBC, 0xB7, 0x55,
	0xA8, 0xD2, 0x00, 0x33, 0xDD, 0x82, 0x95, 0xE6, 0xE4, 0xA0,
	0x06, 0x1C, 0xAE, 0xF4, 0xD7, 0x5F, 0x38, 0xAF, 0x7E, 0x23,
	0x2F, 0x12, 0xD8, 0xC7, 0x68, 0x13, 0x8A, 0x74, 0x48, 0x66,
	0xB1, 0x1E, 0x76, 0x53, 0x92, 0x24, 0xD3, 0x47, 0x35, 0x78,
	0x08, 0xD9, 0x4D, 0x73, 0x9C, 0xDE, 0xEA, 0x79, 0xF3, 0x69,
	0xB8, 0x19, 0xCA, 0x07, 0x61, 0x7F, 0x54, 0xEC, 0xDF, 0x21,
	0x8B, 0x56, 0xB5, 0xCC, 0x6E, 0x85, 0x3A, 0xBF, 0xFC, 0x3C,
	0xD0, 0xF5, 0xE2, 0x96, 0x3D, 0x36, 0x18, 0x39, 0x34, 0xA3,
	0x27, 0x7C, 0xC5, 0x8C, 0xBA, 0x81, 0x01, 0xAA, 0x05, 0xB2,
	0xEB, 0x4B, 0x0D, 0xFD, 0xA4, 0xC4, 0x6C, 0x8F, 0xD4, 0x2B,
	0x62, 0x93, 0xE0, 0xCE, 0x88, 0x45,
}

type Cipher struct {
	Diverged bool
	Key      uint32
}

func (c *Cipher) Encrypt(data []byte) (out []byte, err error) {
	if len(data) == 0 {
		err = errors.New("data empty")
		return
	}
	size := len(data)

	// a2[0] = Size + 4 (uint16)
	// compute v8 = 4 * ((a2[0] + 3) / 4)  (4-byte aligned length)
	a2_0 := uint32(size + 4) // may be > 0xFFFF; original stored into uint16, so truncated
	v8 := int(4 * ((a2_0 + 3) / 4))

	buf := make([]byte, v8)
	// zeroed by default

	// write a2[0] at offset 0 (uint16 little-endian, truncated like original)
	binary.LittleEndian.PutUint16(buf[0:2], uint16(a2_0&0xFFFF))

	// data copy starts at offset 4 (a2 + 2)
	copy(buf[4:], data)

	// compute checksum: sum words from index 2 to (v8>>1)-3 inclusive
	wordCount := v8 / 2
	var sum uint32 = 0
	// words are 16-bit little-endian
	// iterate i = 2; i < (v8>>1)-2; ++i
	limit := wordCount - 2
	if limit < 2 {
		limit = 2
	}
	for i := 2; i < limit; i++ {
		off := i * 2
		sum += uint32(binary.LittleEndian.Uint16(buf[off : off+2]))
	}
	// a2[1] = -v6  (i.e. two's complement modulo 0x10000)
	checksum := uint16((-int32(sum)) & 0xFFFF)
	binary.LittleEndian.PutUint16(buf[2:4], checksum)

	// apply byte mapping table to full buffer
	encryptSBoxStep(buf)

	var oldKey = c.Key
	c.Key = encryptXorStep(buf, c.Key) // xor per 4-byte block and update key
	if !c.Diverged {
		c.Diverged = true
		var keyBytes [4]byte
		binary.LittleEndian.PutUint32(keyBytes[:], oldKey)
		buf = append(buf, keyBytes[:]...)
	}
	return buf, nil
}

func encryptXorStep(buf []byte, key uint32) uint32 {
	blocks := (len(buf) + 3) / 4
	for i := 0; i < blocks; i++ {
		off := i * 4
		// ensure we can read 4 bytes (buf is aligned and padded by caller)
		val := binary.LittleEndian.Uint32(buf[off : off+4])
		val ^= key
		binary.LittleEndian.PutUint32(buf[off:off+4], val)

		// get low and high 16-bit words from the XORed dword
		w0 := binary.LittleEndian.Uint16(buf[off : off+2])
		w1 := binary.LittleEndian.Uint16(buf[off+2 : off+4])

		t0 := uint32(encryptLCG16(w0)) & 0xFFFF
		t1 := uint32(encryptLCG16(w1)) & 0xFFFF

		key = ((t1 << 16) | t0) ^ 0xA55AA55A
	}
	return key
}

func encryptLCG16(a uint16) uint32 {
	return (241103*uint32(a) + 2533101) >> 16
}

func encryptSBoxStep(buf []byte) {
	for i := range buf {
		buf[i] = encryptBox[buf[i]]
	}
}
